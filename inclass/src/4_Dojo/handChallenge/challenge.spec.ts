import { Emoji } from './challenge';

describe('', () => {
  it("ðŸ‘‰ should move the memory pointer to the next cell", () => {
    const emoji = new Emoji([0, 65])
    emoji.read("ðŸ‘‰ðŸ‘Š")
    expect(emoji.print()).toBe("A");
  })

  it("ðŸ‘ˆ should move the memory pointer to the previous cell", () => {
    const emoji = new Emoji([65, 0], 1)
    emoji.read("ðŸ‘ˆðŸ‘Š")
    expect(emoji.print()).toBe("A");
  })

  it("ðŸ‘† Should increment memory cell to 255 and then decrease it to 0", () => {
    const emoji = new Emoji([255])
    emoji.read("ðŸ‘†ðŸ‘Š")

    expect(emoji.print()).toBe("\u0000")
  })

  it("ðŸ‘† should increment the memory cell at the current position", () => {
    const emoji = new Emoji([64])
    emoji.read("ðŸ‘†ðŸ‘Š")
    expect(emoji.print()).toBe("A")
  })


  it("ðŸ‘‰ðŸ‘† should move the memory pointer to the next cell and increment the actual cell", () => {
    const emoji = new Emoji([0, 64])
    emoji.read("ðŸ‘‰ðŸ‘†ðŸ‘Š")
    expect(emoji.print()).toBe("A")
  })

  it("ðŸ‘‡ should decrease the memory cell at the current position.", () => {
    const emoji = new Emoji([66])
    emoji.read("ðŸ‘‡ðŸ‘Š")
    expect(emoji.print()).toBe("A")
  })

  it("ðŸ‘‡ should set 255 if value is 0", () => {
    const emoji = new Emoji([0])
    emoji.read("ðŸ‘‡ðŸ‘Š")

    expect(emoji.print()).toBe("Ã¿")
  })

});