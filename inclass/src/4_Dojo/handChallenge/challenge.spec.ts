import { Emoji } from './challenge';

describe('', () => {
  const HELLO_SEQUENCE = "ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š";
  const HELLO_WORLD_SEQUENCE = "ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š";

  let emoji: Emoji;

  it("ðŸ‘‰ should move the memory pointer to the next cell", () => {
    initializeEmoji([0, 65]);

    emoji.read("ðŸ‘‰ðŸ‘Š");

    expect(emoji.print()).toBe("A");
  })

  it("ðŸ‘ˆ should move the memory pointer to the previous cell", () => {
    initializeEmoji([65, 0], 1);

    emoji.read("ðŸ‘ˆðŸ‘Š")

    expect(emoji.print()).toBe("A");
  })

  it("ðŸ‘† Should increment memory cell to 255 and then decrease it to 0", () => {
    initializeEmoji([255]);

    emoji.read("ðŸ‘†ðŸ‘Š")

    expect(emoji.print()).toBe("\u0000")
  })

  it("ðŸ‘† should increment the memory cell at the current position", () => {
    initializeEmoji([64]);

    emoji.read("ðŸ‘†ðŸ‘Š")

    expect(emoji.print()).toBe("A")
  })


  it("ðŸ‘‰ðŸ‘† should move the memory pointer to the next cell and increment the actual cell", () => {
    initializeEmoji([0, 64]);

    emoji.read("ðŸ‘‰ðŸ‘†ðŸ‘Š")
    expect(emoji.print()).toBe("A")
  })

  it("ðŸ‘‡ should decrease the memory cell at the current position.", () => {
    initializeEmoji([66]);

    emoji.read("ðŸ‘‡ðŸ‘Š")
    expect(emoji.print()).toBe("A")
  })

  it("ðŸ‘‡ should set 255 if value is 0", () => {
    initializeEmoji();

    emoji.read("ðŸ‘‡ðŸ‘Š")

    expect(emoji.print()).toBe("Ã¿")
  })

  it("ðŸ¤œ should jump to the corresponding ðŸ¤› if pointed memory cell has value 0",() => {
    initializeEmoji([0,77]);

    emoji.read("ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘Š")

    expect(emoji.print()).toBe("N")
  })

  it("ðŸ¤œ should not jump to the corresponding ðŸ¤› if pointed memory cell does not have value 0", () => {
    initializeEmoji([84])

    emoji.read("ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘Š")

    expect(emoji.print()).toBe("*")
  })
  
  it("ðŸ¤› should jump to the corresponding previous ðŸ¤œ if pointed memory cell does not have value 0", () => {
    initializeEmoji([80])

    emoji.read("ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘Š")

    expect(emoji.print()).toBe("(")
  })

  it("ðŸ¤œðŸ¤› must have the capability of being nested in other ðŸ¤œðŸ¤›",()=>{
    initializeEmoji([50]);

    emoji.read("ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ¤›ðŸ‘ˆðŸ‘Š");
    
    expect(emoji.print()).toBe("3");
  });

  it("Should print 'Hello'", ()=>{
    initializeEmoji();

    emoji.read(HELLO_SEQUENCE);

    expect(emoji.print()).toBe("Hello")

  })
  
  it("Should print 'Hello World!\\n'", ()=>{
    initializeEmoji();

    emoji.read(HELLO_WORLD_SEQUENCE);
    
    expect(emoji.print()).toBe("Hello World!\n");

  })

  function initializeEmoji(memory: number[] = [0], pointer: number = 0){
    emoji = new Emoji(memory, pointer);
  }
    
});
